# See: https://nvie.com/posts/a-successful-git-branching-model/
# See: https://towardsdatascience.com/setup-version-increment-and-automated-release-process-591d87ea1221

name: Workflow to execute when any changes are being merged to the main branch.

on:
  pull_request:
    branches:
      - master
    types:
      - closed
  workflow_dispatch:
    branches:
      - master

jobs:
  after-merge-to-master:
    name: job::after-merge-to-master
    # See: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request
    # See: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request

    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout service
        uses: actions/checkout@v2
      #        with:
      #          Relative path of dir under $GITHUB_WORKSPACE to place the repository.
      #          path:
      #          The name of the branch to checkout. Since this workflow is for master, it is the default and need not be specified.
      #          ref: master
      - name: Setup JDK
        uses: actions/setup-java@v2
        with:
          java-version: '16'
          distribution: 'adopt'

      - name: Build
        run: echo "do clean build, and run all tests again. if failed then clean deploy and release? i think release should be via tag that is aplied manually to main branch head commit.
        #        (if we had develop branch then we would do this on dev instead of main) after merge we would clean build, and
        #        run all tests again. on failure we should create issue and assign to merge user. mark it as high priority.
        #        next level would be to create a bug branch (with bug dev as owner i.e. owner of github.head_ref will be set
        #        to bug dev) and then reset the head of dev branch (so it becomes stable again) and create issue and assign
        #        to bug dev. auto branch creation makes sense here if we have to reset dev head to prev commit bc then if we
        #        dont create branch then that commit
        #        will be lost and would have to manually use ref db to create branch with that commit as its head.
        #
        #        since we dont have develop branch yet so Here we should first do things like maven clean build run all tests
        #        on main then deploy to development
        #         run: echo "trigger clean deploy and release? i think release should be via tag that is aplied manually to main branch head commit.
        #        once tag is applied then an on release tag workflow should trigger release goal. which should not only bump versions but also deploy to prod.
        #        before release,
        #release should
      #        run: mvn build

      - name: Run terraform tests
        run: echo "Running terraform tests"

      - name: Run helm tests
        run: echo "Running helm tests"

      - name: Deploy changes
        run: echo "Deploying changes"

      - name: Ensure roll-out
        run: echo "Ensuring rollout"
