spring.profiles.active=dev

spring.application.name=Jugnoo

server.port=8081

debug=false

spring.datasource.url= jdbc:postgresql://jawad-postgre-server.cec5fyfhcwlv.us-west-2.rds.amazonaws.com:5432/db_jawad
spring.datasource.username=user_jawad
spring.datasource.password=user_jawad

# With HikariDataSource for example spring.jpa.properties.hibernate.default_schema is ignored and you have to set
# spring.datasource.hikari.schema=schema
# See https://stackoverflow.com/questions/24278659/change-database-schema-used-by-spring-boot
spring.jpa.properties.hibernate.default_schema=schema_jawad


# Setting driver class is probably not needed.
spring.datasource.driver-class-name=org.postgresql.Driver
# It is better to set this property rather than setting the dialect. Also by setting this we are actually setting
# the dialect (indirectly).
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect


#Sample for H2 db configuration:
# url value examples:
#   Windows absolute path sample: jdbc:h2:file:C:/temp/test:
#   Unix absolute path sample: jdbc:h2:file:/data/demo
#   In memory sample: url: jdbc:h2:mem:mydb
#spring.datasource.url=jdbc:h2:mem:mydb
#spring.datasource.username=sa
#spring.datasource.password=password
#spring.datasource.driver-class-name=org.h2.Driver
#spring.jpa.database-platform=h2
#spring.jpa.hibernate.dialect=org.hibernate.dialect.H2Dialect
#spring.h2.console.enabled=false

# Path at which the console is available.
#spring.h2.console.path=/h2-console

# Whether to enable trace output.
#spring.h2.console.settings.trace=false

# Password to access preferences and tools of H2 Console.
#spring.h2.console.settings.web-admin-password=

# Whether to enable remote access.
#spring.h2.console.settings.web-allow-others=false


#spring.jpa.hibernate.naming.implicit-strategy
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#spring.jpa.hibernate.naming.physical-strategy=com.edtech.jugno.PropertyNameBoundColumnNamingStrategy

# spring.jpa.properties.* properties are custom/module specific properties and passed directly to the respective module.
#spring.jpa.properties.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.format_sql=true

# Hibernate looks for import.sql in class path for data initialization if ddl-auto value create or create-drop.
#   https://javabydeveloper.com/spring-boot-loading-initial-data/)
#   https://docs.spring.io/spring-boot/docs/1.1.0.M1/reference/html/howto-database-initialization.html#:~:text=can%20set%20spring.-,jpa.,or%20not%20(default%20none%20).
spring.jpa.generate-ddl=false
spring.jpa.show-sql=true


spring.sql.init.mode=never


# Whether Flyway should attempt to create the schemas specified in the schemas property.
#spring.flyway.create-schemas=true

# Default schema name managed by Flyway (case-sensitive).
#spring.flyway.default-schema=

# Whether to enable flyway.
#spring.flyway.enabled=true

# Encoding of SQL migrations.
#spring.flyway.encoding=utf-8

# Whether to group all pending migrations together in the same transaction when applying them.
#spring.flyway.group=false

#spring.flyway.locations=classpath:db/migration/{vendor}

# Login password of the database to migrate.
#spring.flyway.password=user_jawad_flyway

# Scheme names managed by Flyway (case-sensitive).
#spring.flyway.schemas=


# JDBC url of the database to migrate. If not set, the primary configured data source is used.
#spring.flyway.url=jdbc:postgresql://localhost:5432/db_jawad

# Login user of the database to migrate.
#spring.flyway.user=user_jawad


spring.main.banner-mode=off

spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

spring.security.user.name=foo
spring.security.user.password=foo
